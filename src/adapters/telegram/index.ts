import { Telegraf, Markup } from 'telegraf'
import { core } from '../../core'

export class TelegramBot {
  private bot: Telegraf
  private userStates: Record<
    number,
    {
      step?: string
      origin?: string
      barcode?: string
    }
  > = {}

  constructor() {
    const token = process.env.TG_TOKEN
    if (!token) {
      throw new Error('Missing required environment variable: TG_TOKEN')
    }

    this.bot = new Telegraf(token)
    this.init()

    this.bot.catch((err) => {
      console.error('Oooops', err)
    })
  }

  async init() {
    this.bot.launch()
    console.log('üöÄ Telegram bot started')

    this.bot.telegram.setMyCommands([
      {
        command: 'start',
        description: '–ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—ã–ª–æ–∫'
      },
      { command: 'me', description: '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å' }
    ])

    this.bot.command('start', async (ctx: any) => {
      await core.createUser(String(ctx.from.id))

      await ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–¥–µ —Ç–≤–æ—è –ø–æ—Å—ã–ª–∫–∞, –∞ —Ç–∞–∫ –∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ—ë –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.`
      )

      return await this.showMainMenu(ctx)
    })

    this.bot.command('me', (ctx: any) => {
      const { id, username, first_name, last_name } = ctx.from
      return ctx.reply(`–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
      ID: ${id || '-'}
      UserName: ${username || '-'}
      FirstName: ${first_name || '-'}
      LastName: ${last_name || '-'}
      `)
    })

    this.bot.on('text', async (ctx: any) => {
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'showMainMenu')]
      ])

      try {
        return await this.handleText(ctx)
      } catch (error) {
        console.error('Error handling message:', error)
        return await ctx.reply(
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.',
          keyboard
        )
      }
    })

    this.bot.action('showMainMenu', async (ctx: any) => {
      await ctx.answerCbQuery()
      try {
        await ctx.deleteMessage()
      } catch {}

      return await this.showMainMenu(ctx)
    })

    this.bot.action('showParcels', async (ctx: any) => {
      await ctx.answerCbQuery()
      try {
        await ctx.deleteMessage()
      } catch {}

      return await this.showParcels(ctx)
    })

    this.bot.action('whereParcel', async (ctx: any) => {
      await ctx.answerCbQuery()
      try {
        await ctx.deleteMessage()
      } catch {}

      await this.updateUserState(ctx.from.id, {
        step: 'awaitBarcode',
        origin: 'whereParcel'
      })

      return await ctx.reply(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏:',
        Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'showMainMenu')]
        ])
      )
    })

    this.bot.action('trackParcel', async (ctx: any) => {
      await ctx.answerCbQuery()
      try {
        await ctx.deleteMessage()
      } catch {}

      await this.updateUserState(ctx.from.id, {
        step: 'awaitBarcode',
        origin: 'trackParcel'
      })

      return await ctx.reply(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏:',
        Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'showMainMenu')]
        ])
      )
    })

    this.bot.action(/whereParcel_(.+)/, async (ctx: any) => {
      await ctx.answerCbQuery()
      try {
        await ctx.deleteMessage()
      } catch {}

      return await this.whereParcel(ctx, ctx.match[1])
    })

    this.bot.action(/beginTrackParcel_(.+)/, async (ctx: any) => {
      await ctx.answerCbQuery()
      try {
        await ctx.deleteMessage()
      } catch {}

      return await this.trackParcel(ctx, ctx.match[1])
    })

    this.bot.action(/confirnInput_(.+)/, async (ctx: any) => {
      await ctx.answerCbQuery()
      try {
        await ctx.deleteMessage()
      } catch {}

      switch (ctx.match[1]) {
        case 'barcode': {
          const userState = this.userStates[ctx.from.id]

          switch (userState.origin) {
            case 'whereParcel': {
              delete this.userStates[ctx.from.id]

              return await this.whereParcel(ctx, userState.barcode)
            }

            case 'trackParcel': {
              delete this.userStates[ctx.from.id]

              return await this.trackParcel(ctx, userState.barcode)
            }
          }
        }
      }
    })

    this.bot.action(/declineInput_(.+)/, async (ctx: any) => {
      await ctx.answerCbQuery()
      try {
        await ctx.deleteMessage()
      } catch {}

      switch (ctx.match[1]) {
        case 'barcode': {
          await this.updateUserState(ctx.from.id, { step: 'awaitBarcode' })

          return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏:')
        }
      }
    })
  }

  private async showMainMenu(ctx: any) {
    const user = await core.getUser(ctx.from.id)
    const parcels = await core.getParcelsByUserId(user.userId)

    const keyboard: any[] = [
      [Markup.button.callback('–£–∑–Ω–∞—Ç—å –≥–¥–µ –ø–æ—Å—ã–ª–∫–∞', 'whereParcel')],
      [Markup.button.callback('–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å—ã–ª–∫—É', 'trackParcel')]
    ]

    if (parcels.length) {
      keyboard.push([
        Markup.button.callback('üì¶ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ—Å—ã–ª–∫–∏', 'showParcels')
      ])
    }

    return await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', Markup.inlineKeyboard(keyboard))
  }

  private async handleText(ctx: any) {
    const userId = ctx.from.id
    const userState = this.userStates[userId]

    if (!userState) return

    switch (userState.step) {
      case 'awaitBarcode': {
        if (ctx.message.text.length < 7) {
          await this.updateUserState(userId, { step: 'awaitBarcode' })

          return await ctx.reply(
            '–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 7 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞:'
          )
        }

        await this.updateUserState(userId, { barcode: ctx.message.text })

        return await ctx.reply(
          `–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä: ${ctx.message.text}, –≤–µ—Ä–Ω—ã–π?`,
          Markup.inlineKeyboard([
            [Markup.button.callback('–î–∞', 'confirnInput_barcode')],
            [Markup.button.callback('–ù–µ—Ç', 'declineInput_barcode')],
            [Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'showMainMenu')]
          ])
        )
      }
    }
  }

  private async updateUserState(
    chatId: number,
    newState: Partial<(typeof this.userStates)[number]>
  ) {
    const currentState = this.userStates[chatId]

    this.userStates[chatId] = { ...currentState, ...newState }
  }

  private async whereParcel(ctx: any, barcode: string) {
    const data = await core.whereParcel(barcode)

    if (!data.ok) {
      return await ctx.reply(data.message)
    }

    const statusIcons: Record<string, string> = {
      accepted: 'üì¶',
      arrived: 'üìç',
      delivered: '‚úÖ',
      default: 'üõ´'
    }

    const maxLength = 4000
    const messages: string[] = []

    let currentText =
      `üì¶ –î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—ã–ª–∫–µ:\n\n` +
      `#Ô∏è‚É£ –¢—Ä–µ–∫ –Ω–æ–º–µ—Ä: ${data.status.barcode}\n` +
      `üöö –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫: ${data.status.carrier.name}\n` +
      `üïí –í –ø—É—Ç–∏: ${data.status.deliveringTime} –¥–Ω–µ–π\n` +
      `‚öñÔ∏è –í–µ—Å: ${data.status.weight} –∫–≥.\n` +
      `üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${data.status.attributes.sender}\n` +
      `üì• –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${data.status.attributes.recipient}\n` +
      `üìå –¢–∏–ø: ${data.status.attributes.type}\n` +
      `üí∞ –û–±—ä—è–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: ${data.status.attributes.insurance} —Ä—É–±.\n\n` +
      `üìù –ò—Å—Ç–æ—Ä–∏—è:\n\n`

    for (const ev of data.status.events.sort(
      (a, b) => b.eventDate - a.eventDate
    )) {
      let icon = statusIcons.default
      if (ev.accepted) icon = statusIcons.accepted
      if (ev.arrived) icon = statusIcons.arrived
      if (ev.delivered) icon = statusIcons.delivered

      const date = new Date(ev.eventDate).toLocaleString('ru-RU')
      const line = `${icon} ${date} ‚Äî ${ev.operation} (${ev.location}, ${ev.zipCode})\n`

      if (currentText.length + line.length > maxLength) {
        messages.push(currentText)
        currentText = line
      } else {
        currentText += line
      }
    }

    if (currentText.trim().length > 0) {
      messages.push(currentText)
    }

    for (const msg of messages) {
      await ctx.reply(msg)
    }

    return await ctx.reply(
      '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            '–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏',
            `beginTrackParcel_${data.status.barcode}`
          )
        ],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'showParcels')],
        [Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'showMainMenu')]
      ])
    )
  }

  private async trackParcel(ctx: any, barcode: string) {
    const data = await core.trackParcel(ctx.from.id, barcode)

    return await ctx.reply(
      data.message,
      Markup.inlineKeyboard([
        [Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'showMainMenu')]
      ])
    )
  }

  private async showParcels(ctx: any) {
    const user = await core.getUser(ctx.from.id)
    const parcels = await core.getParcelsByUserId(user.userId)

    const keyboard = Markup.inlineKeyboard([
      ...parcels.map((parcel: any) => [
        Markup.button.callback(
          `${parcel.barcode}`,
          `whereParcel_${parcel.barcode}`
        )
      ]),
      [Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'showMainMenu')]
    ])

    return await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –ø–æ—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π:',
      keyboard
    )
  }

  async sendMessage(chatId: string, message: any) {
    return await this.bot.telegram.sendMessage(chatId, message)
  }
}
